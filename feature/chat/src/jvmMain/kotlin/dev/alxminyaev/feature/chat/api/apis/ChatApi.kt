/**
 * Chat service
 * Chat service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: alxminyaev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.alxminyaev.feature.chat.api.apis

import com.alxminyaev.tool.error.exceptions.ValidationDataException
import com.google.gson.Gson
import dev.alxminyaev.feature.chat.api.models.EntityLongCreatedResponse
import dev.alxminyaev.feature.chat.api.models.PostNewChatRequest
import dev.alxminyaev.feature.chat.api.toChatDetailResponse
import dev.alxminyaev.feature.chat.api.toChatsListResponse
import dev.alxminyaev.feature.chat.model.Chat
import dev.alxminyaev.feature.chat.model.DataLimit
import dev.alxminyaev.feature.chat.model.SideOfChat
import dev.alxminyaev.feature.chat.usecase.chat.CreateNewChatUseCase
import dev.alxminyaev.feature.chat.usecase.chat.GetChatByIdUseCase
import dev.alxminyaev.feature.chat.usecase.chat.GetChatsForUserUseCase
import dev.alxminyaev.tool.webServer.utils.user
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.locations.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import org.kodein.di.instance
import org.kodein.di.ktor.di


@KtorExperimentalLocationsAPI
fun Route.ChatApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate {
        route("/api/v1/chat") {
            get {

                val useCase by di().instance<GetChatsForUserUseCase>()
                val objects = useCase.invoke(
                    user = SideOfChat.User(call.user.id),
                    dataLimit = DataLimit(call.parameters["offset"]!!.toLong(), call.parameters["limit"]!!.toInt())
                )

                call.respond(objects.toChatsListResponse())
            }

            get("/{chatId}") {
                val useCase by di().instance<GetChatByIdUseCase>()
                val obj =
                    useCase.invoke(id = call.parameters["chatId"]?.toLongOrNull() ?: throw ValidationDataException())

                call.respond(obj.toChatDetailResponse())
            }
        }


    }

    authenticate {
        post("api/v1/chat/create") {
            val receive = call.receive<PostNewChatRequest>()
            val useCase by di().instance<CreateNewChatUseCase>()
            val entityId = useCase.invoke(
                creatorId = call.user.id,
                usersId = receive.users.toList(),
                chatType = Chat.Type.getTypeOfChatById(receive.chatType)
            )

            call.respond(EntityLongCreatedResponse(entityId))
        }
    }

}
